@page "/listBooks"

@using Biblioteca.Business.Interfaces
@using Biblioteca.Data.Models
@using Biblioteca.Business.Interfases
@inject IJSRuntime JsRuntime
@inject IAuthorRepository AuthorService
@inject IBookRepository BookService
@inject ICategoryRepository CategoryService
@rendermode InteractiveServer


<!-- Agregar Font Awesome para los iconos -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<div class="container mt-4">
    <h3 class="text-center mb-4">Gestión de Libros</h3>

    <!-- Buscador -->
    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Buscar por nombre de libro o autor..." @oninput="FiltrarLibros" />
    </div>

    <!-- Botón para agregar un libro -->
    <div class="text-end mb-3">
        <button class="btn btn-add" @onclick="MostrarModal">
            <i class="fas fa-plus"></i> Agregar Libro
        </button>
    </div>

    <!-- Contenedor de "Ordenar por" alineado a la derecha -->
    <div class="mb-3 d-flex justify-content-end align-items-center sort-container">
        <select id="orderBy" class="form-select" @onchange="OrdenarLibros">
            <option value="Nombre">Orden Alfabético</option>
            <option value="Cedula">Por Cédula</option>
            <option value="Activo">Activo</option>
            <option value="Inactivo">Inactivo</option>
        </select>
    </div>

    @if (books == null)
    {
        <p class="text-center">Cargando libros...</p>
    }
    else if (!books.Any())
    {
        <p class="text-center">No hay libros disponibles.</p>
    }
    else
    {
        <div class="row">
            @foreach (var book in filteredBooks)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100 shadow-sm border-0" style="background-color: #f9f9f9; border-radius: 15px;">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-dark">@book.Title</h5>
                            <p class="card-text"><strong>ID:</strong> @book.Id_Book</p>
                            <p class="card-text"><strong>Autor:</strong> @book.Author?.Name</p>
                            <p class="card-text"><strong>Categoría:</strong> @book.Category?.Name</p>
                            <p class="card-text"><strong>Fecha de Edición:</strong> @book.Edition_Date.ToShortDateString()</p>
                            <p class="card-text"><strong>Páginas:</strong> @book.Pages</p>
                            <p class="card-text"><strong>Stock:</strong> @book.Stock</p>
                            <p class="card-text"><strong>Precio:</strong> @book.Price.ToString("C")</p>
                            <div class="d-flex justify-content-between mt-auto">
                                <button class="btn btn-primary btn-sm" @onclick="() => EditarLibro(book.Id_Book)">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarLibro(book.Id_Book)">
                                    <i class="fas fa-trash-alt"></i> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Modal -->
    @if (mostrarModal)
    {
        <div class="modal show d-block">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@((esEdicion ? "Editar" : "Agregar") + " Libro")</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModal" style="filter: invert(1);"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="nuevoLibro" OnValidSubmit="GuardarLibro">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label for="idBook" class="form-label">ID</label>
                                <input type="text" id="idBook" class="form-control" @bind="nuevoLibro.Id_Book" disabled="@esEdicion" required />
                                <ValidationMessage For="@(() => nuevoLibro.Id_Book)" />
                            </div>
                            <div class="mb-3">
                                <label for="title" class="form-label">Título</label>
                                <InputText id="title" class="form-control" @bind-Value="nuevoLibro.Title" required />
                                <ValidationMessage For="@(() => nuevoLibro.Title)" />
                            </div>
                            <div class="mb-3">
                                <label for="pages" class="form-label">Páginas</label>
                                <InputNumber id="pages" class="form-control" @bind-Value="nuevoLibro.Pages" required />
                                <ValidationMessage For="@(() => nuevoLibro.Pages)" />
                            </div>
                            <div class="mb-3">
                                <label for="price" class="form-label">Precio</label>
                                <InputNumber id="price" class="form-control" @bind-Value="nuevoLibro.Price" required />
                                <ValidationMessage For="@(() => nuevoLibro.Price)" />
                            </div>
                            <div class="mb-3">
                                <label for="editionDate" class="form-label">Fecha de Edición</label>
                                <InputDate id="editionDate" class="form-control" @bind-Value="nuevoLibro.Edition_Date" required />
                                <ValidationMessage For="@(() => nuevoLibro.Edition_Date)" />
                            </div>
                            <div class="mb-3">
                                <label for="stock" class="form-label">Stock</label>
                                <InputNumber id="stock" class="form-control" @bind-Value="nuevoLibro.Stock" required />
                                <ValidationMessage For="@(() => nuevoLibro.Stock)" />
                            </div>
                            <div class="mb-3">
                                <label for="idAuthor" class="form-label">Autor</label>
                                <select id="idAuthor" class="form-select" @bind="nuevoLibro.Id_Author" required>
                                    <option value="">Seleccione un autor</option>
                                    @foreach (var author in authors)
                                    {
                                        <option value="@author.Id_Author">@author.Name</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => nuevoLibro.Id_Author)" />
                            </div>
                            <div class="mb-3">
                                <label for="categoryId" class="form-label">Categoría</label>
                                <select id="categoryId" class="form-select" @bind="nuevoLibro.CategoryId" required>
                                    <option value="">Seleccione una categoría</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Id_Category">@category.Name</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => nuevoLibro.CategoryId)" />
                            </div>

                            <div class="modal-footer">
                                <button class="btn btn-primary" type="submit">Guardar</button>
                                <button class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }


</div>

@code {
    private IEnumerable<Book> books;
    private IEnumerable<Author> authors;
    private IEnumerable<Book> filteredBooks;
    private IEnumerable<Category> categories;
    private Book nuevoLibro = new Book();
    private bool mostrarModal = false;
    private bool esEdicion = false;
    private string busqueda = "";

    protected override async Task OnInitializedAsync()
    {
        await CargarLibros();
        await CargarAutores();
        await CargarCategorias();
        nuevoLibro.Edition_Date = DateTime.Now;
    }

    private async Task CargarLibros()
    {
        books = await BookService.GetAlLAsync();
        filteredBooks = books;
    }

    private async Task CargarAutores()
    {
        authors = await AuthorService.GetAlLAsync();
    }

    private async Task CargarCategorias()
    {
        categories = await CategoryService.GetAllAsync();
    }

    private void MostrarModal()
    {
        nuevoLibro = new Book(); // Resetea el formulario
        esEdicion = false; // Indica que es un nuevo libro
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }

    private async Task GuardarLibro()
    {
        // Validar si el ID del libro ya existe antes de agregarlo
        if (!esEdicion && books.Any(a => a.Id_Book == nuevoLibro.Id_Book))
        {
            await JsRuntime.InvokeVoidAsync("alert", "El ID del libro ya existe. Introduzca un ID diferente.");
            return;
        }

        if (!string.IsNullOrWhiteSpace(nuevoLibro.Id_Book) &&
            !string.IsNullOrWhiteSpace(nuevoLibro.Title) &&
            nuevoLibro.Pages > 0 &&
            nuevoLibro.Price > 0 &&
            !string.IsNullOrWhiteSpace(nuevoLibro.Id_Author) &&
            nuevoLibro.CategoryId > 0)
        {
            if (esEdicion)
            {
                await BookService.UpdateBookAsync(nuevoLibro);
            }
            else
            {
                await BookService.AddBookAsync(nuevoLibro);
            }
            await CargarLibros();
            CerrarModal();
        }
        else
        {
            Console.WriteLine("Datos incompletos o inválidos.");
        }
    }

    private async Task EditarLibro(string idBook)
    {
        var book = await BookService.GetByIdAsyns(idBook);
        if (book != null)
        {
            nuevoLibro = book;
            esEdicion = true;
            mostrarModal = true;
        }
    }

    private async Task EliminarLibro(string idBook)
    {
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", $"¿Está seguro de que desea eliminar este libro?");
        if (confirm)
        {
            await BookService.DeleteBookAsync(idBook);
            await CargarLibros();
        }
    }

    // Método para filtrar libros basado en el texto de búsqueda
    private void FiltrarLibros(ChangeEventArgs evt)
    {
        busqueda = evt.Value.ToString();
        if (string.IsNullOrWhiteSpace(busqueda))
        {
            filteredBooks = books;
        }
        else
        {
            filteredBooks = books.Where(book =>
            book.Title.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
            book.Author.Name.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
            book.Stock.ToString().Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
            book.Id_Book.ToString().Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
            book.Price.ToString().Contains(busqueda, StringComparison.OrdinalIgnoreCase));
        }
    }

    // Método para ordenar libros
    private void OrdenarLibros(ChangeEventArgs evt)
    {
        var criterio = evt.Value.ToString();
        switch (criterio)
        {
            case "Nombre":
                filteredBooks = filteredBooks.OrderBy(b => b.Title);
                break;
            case "Cedula":
                filteredBooks = filteredBooks.OrderBy(b => b.Id_Book);
                break;
            case "Activo":
                filteredBooks = filteredBooks.OrderBy(b => b.Stock > 0); // Ejemplo de criterio activo/inactivo
                break;
            case "Inactivo":
                filteredBooks = filteredBooks.OrderBy(b => b.Stock == 0); // Ejemplo de criterio activo/inactivo
                break;
        }
    }
}

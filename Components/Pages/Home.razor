@page "/"

@using Biblioteca.Business.Interfaces
@using Biblioteca.Business.Interfases
@inject IBookRepository BookRepository
@inject IAuthorRepository AuthorRepository
@inject IPersonRepository PersonRepository
@inject ILoanRepository LoanRepository

@inject IJSRuntime JS


<PageTitle>Inicio</PageTitle>

<!-- Enlace a la fuente de Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet" />

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="js/site.js"></script> <!-- Asegúrate de que está en la carpeta correcta -->




<h3>Biblioteca</h3>

<div class="container">
    <div class="row m-5">
        <canvas id="libraryChart"></canvas>
    </div>
    <h3>Lista de libros</h3>

    <div class="author-list">

        @foreach (var author in authorsWithBooks)
        {
            <div class="author-card">
                <div class="card">
                    <div class="card-body">
                        <div class="author-name">@author.Author</div>
                        <div class="book-title">@author.Book</div>
                        <div class="stock-info">Stock: @author.Stock</div>
                    </div>
                </div>
            </div>
        }
    </div>

    
</div>

@code {
    private int TotalBooks;
    private int TotalAuthors;
    private int TotalPersons;
    private int TotalLoans;
    private List<AuthorBookStock> authorsWithBooks = new();
    private bool _firstRender = true;

    protected override async Task OnInitializedAsync()
    {
        var books = await BookRepository.GetAlLAsync();
        var authors = await AuthorRepository.GetAlLAsync();
        var persons = await PersonRepository.GetAllAsync();
        var loans = await LoanRepository.GetAllAsync();

        authorsWithBooks = (from book in books
                            from author in authors
                            where book.Author?.Id_Author == author.Id_Author
                            select new AuthorBookStock
                                {
                                    Author = author.Name,
                                    Book = book.Title,
                                    Stock = book.Stock
                                }).ToList();

        // ✅ Asignamos valores
        TotalBooks = books.Count();
        TotalAuthors = authors.Count();
        TotalPersons = persons.Count();
        TotalLoans = loans.Count();

        // ✅ Forzamos renderizado para que los datos se actualicen en la UI
        await InvokeAsync(StateHasChanged);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Esperamos 100ms para asegurarnos de que la UI ya se actualizó
            await Task.Delay(100);

            if (TotalBooks > 0) // ✅ Solo llamamos la función si hay datos cargados
            {
                await JS.InvokeVoidAsync("renderLibraryChart", TotalBooks, TotalAuthors, TotalPersons, TotalLoans);
            }

            _firstRender = false;
        }
    }


    public class AuthorBookStock
    {
        public string Author { get; set; }
        public string Book { get; set; }
        public int Stock { get; set; }
    }
}



